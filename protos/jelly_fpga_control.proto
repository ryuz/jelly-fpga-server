syntax = "proto3";
package jelly_fpga_control;

service JellyFpgaControl {
    rpc GetVersion ( Empty ) returns (VersionResponse);

    rpc Reset ( ResetRequest ) returns (BoolResponse);

    rpc Load   ( LoadRequest ) returns (LoadResponse);
    rpc Unload ( UnloadRequest ) returns (BoolResponse);

    rpc RegisterAccel   ( RegisterAccelRequest ) returns (BoolResponse);
    rpc UnregisterAccel ( UnregisterAccelRequest ) returns (BoolResponse);

    rpc UploadFirmware ( stream UploadFirmwareRequest ) returns (BoolResponse);
    rpc RemoveFirmware ( RemoveFirmwareRequest ) returns (BoolResponse);
    rpc LoadBitstream  ( LoadBitstreamRequest ) returns (BoolResponse);
    rpc LoadDtbo       ( LoadDtboRequest ) returns (BoolResponse);

    rpc DtsToDtb ( DtsToDtbRequest ) returns (DtsToDtbResponse);
    rpc BitstreamToBin ( BitstreamToBinRequest ) returns (BoolResponse);

    rpc OpenMmap     (OpenMmapRequest)    returns (OpenResponse);
    rpc OpenUio      (OpenUioRequest)     returns (OpenResponse);
    rpc OpenUdmabuf  (OpenUdmabufRequest) returns (OpenResponse);
    rpc Close        (CloseRequest)       returns (BoolResponse);
    rpc Subclone     (SubcloneRequest)    returns (SubcloneResponse);
    rpc GetAddr      (GetAddrRequest)     returns (GetAddrResponse);
    rpc GetSize      (GetSizeRequest)     returns (GetSizeResponse);
    rpc GetPhysAddr  (GetPhysAddrRequest) returns (GetPhysAddrResponse);

    rpc WriteMemU    (WriteMemURequest)   returns (BoolResponse);
    rpc WriteMemI    (WriteMemIRequest)   returns (BoolResponse);
    rpc ReadMemU     (ReadMemRequest)     returns (ReadUResponse);
    rpc ReadMemI     (ReadMemRequest)     returns (ReadIResponse);
    rpc WriteRegU    (WriteRegURequest)   returns (BoolResponse);
    rpc WriteRegI    (WriteRegIRequest)   returns (BoolResponse);
    rpc ReadRegU     (ReadRegRequest)     returns (ReadUResponse);
    rpc ReadRegI     (ReadRegRequest)     returns (ReadIResponse);

    rpc WriteMemF32 (WriteMemF32Request)  returns (BoolResponse);
    rpc WriteMemF64 (WriteMemF64Request)  returns (BoolResponse);
    rpc ReadMemF32  (ReadMemRequest)  returns (ReadF32Response);
    rpc ReadMemF64  (ReadMemRequest)  returns (ReadF64Response);
    rpc WriteRegF32 (WriteRegF32Request)  returns (BoolResponse);
    rpc WriteRegF64 (WriteRegF64Request)  returns (BoolResponse);
    rpc ReadRegF32  (ReadRegRequest)  returns (ReadF32Response);
    rpc ReadRegF64  (ReadRegRequest)  returns (ReadF64Response);

    rpc MemCopyTo   (MemCopyToRequest)   returns (BoolResponse);
    rpc MemCopyFrom (MemCopyFromRequest) returns (MemCopyFromResponse);
}

message Empty {
}

message BoolResponse {
    bool result = 1;
}

message VersionResponse {
    string version = 1;
}

message ResetRequest {
}

message LoadRequest {
    string name = 1;
}

message LoadResponse {
    bool result = 1;
    int32 slot = 2;
}

message UnloadRequest {
    int32 slot = 1;
}

message RegisterAccelRequest {
    string accel_name = 1;
    string bin_file = 2;
    string dtbo_file = 3;
    string json_file = 4;  // optional, empty string if not provided
    bool overwrite = 5;
}

message UnregisterAccelRequest {
    string accel_name = 1;
}

message UploadFirmwareRequest {
    string name = 1;
    bytes data = 2;
}

message RemoveFirmwareRequest {
    string name = 1;
}

message LoadBitstreamRequest {
    string name = 1;
}

message LoadDtboRequest {
    string name = 1;
}


message DtsToDtbRequest {
    string dts = 1;
}

message DtsToDtbResponse {
    bool result = 1;
    bytes dtb = 2;
}

message BitstreamToBinRequest {
    string bitstream_name = 1;
    string bin_name = 2;
    string arch = 3;
}


// Memory Access

message OpenMmapRequest {
    string path = 1;
    uint64 offset = 2;
    uint64 size = 3;
    uint64 unit = 4;
}

message OpenUioRequest {
    string name = 1;
    uint64 unit = 2;
}

message OpenUdmabufRequest {
    string name = 1;
    bool   cache_enable = 2;
    uint64 unit = 3;
}

message OpenResponse {
    bool  result = 1;
    uint32 id = 2;
}

message CloseRequest {
    uint32 id = 1;
}

message SubcloneRequest {
    uint32 id = 1;
    uint64 offset = 2;
    uint64 size = 3;
    uint64 unit = 4;
}

message SubcloneResponse {
    bool  result = 1;
    uint32 id = 2;
}

message GetAddrRequest {
    uint32 id = 1;
}

message GetAddrResponse {
    bool  result = 1;
    uint64 addr = 2;
}

message GetSizeRequest {
    uint32 id = 1;
}

message GetSizeResponse {
    bool  result = 1;
    uint64 size = 2;
}

message GetPhysAddrRequest {
    uint32 id = 1;
}

message GetPhysAddrResponse {
    bool  result = 1;
    uint64 phys_addr = 2;
}

message WriteMemURequest {
    uint32 id = 1;
    uint64 offset = 2;
    uint64 data = 3;
    uint64 size = 4;
}

message WriteMemIRequest {
    uint32 id = 1;
    uint64 offset = 2;
    int64  data = 3;
    uint64 size = 4;
}

message ReadMemRequest {
    uint32 id = 1;
    uint64 offset = 2;
    uint64 size = 3;
}

message WriteRegURequest {
    uint32 id = 1;
    uint64 reg = 2;
    uint64 data = 3;
    uint64 size = 4;
}

message WriteRegIRequest {
    uint32 id = 1;
    uint64 reg = 2;
    int64  data = 3;
    uint64 size = 4;
}

message ReadRegRequest {
    uint32 id = 1;
    uint64 reg = 2;
    uint64 size = 3;
}

message ReadUResponse {
    bool  result = 1;
    uint64 data = 2;
}

message ReadIResponse {
    bool  result = 1;
    int64 data = 2;
}


message WriteMemF32Request {
    uint32 id = 1;
    uint64 offset = 2;
    float  data = 3;
}

message WriteMemF64Request {
    uint32 id = 1;
    uint64 offset = 2;
    double data = 3;
}

message ReadF32Response {
    bool  result = 1;
    float data = 2;
}

message ReadF64Response {
    bool  result = 1;
    double data = 2;
}

message WriteRegF32Request {
    uint32 id = 1;
    uint64 reg = 2;
    float  data = 3;
}

message WriteRegF64Request {
    uint32 id = 1;
    uint64 reg = 2;
    double data = 3;
}


message MemCopyToRequest {
    uint32 id = 1;
    uint64 offset = 2;
    bytes data = 3;
}

message MemCopyFromRequest {
    uint32 id = 1;
    uint64 offset = 2;
    uint64 size = 3;
}

message MemCopyFromResponse {
    bool  result = 1;
    bytes data = 2;
}

